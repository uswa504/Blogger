#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blogger.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Blogger")]
	public partial class BloggerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertFavourite(Favourite instance);
    partial void UpdateFavourite(Favourite instance);
    partial void DeleteFavourite(Favourite instance);
    #endregion
		
		public BloggerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BloggerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BloggerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BloggerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BloggerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BloggerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Favourite> Favourites
		{
			get
			{
				return this.GetTable<Favourite>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _article_id;
		
		private string _article_title;
		
		private string _article_body;
		
		private string _article_publishDate;
		
		private System.Nullable<int> _user_id;
		
		private EntitySet<Favourite> _Favourites;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onarticle_idChanging(int value);
    partial void Onarticle_idChanged();
    partial void Onarticle_titleChanging(string value);
    partial void Onarticle_titleChanged();
    partial void Onarticle_bodyChanging(string value);
    partial void Onarticle_bodyChanged();
    partial void Onarticle_publishDateChanging(string value);
    partial void Onarticle_publishDateChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    #endregion
		
		public Article()
		{
			this._Favourites = new EntitySet<Favourite>(new Action<Favourite>(this.attach_Favourites), new Action<Favourite>(this.detach_Favourites));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int article_id
		{
			get
			{
				return this._article_id;
			}
			set
			{
				if ((this._article_id != value))
				{
					this.Onarticle_idChanging(value);
					this.SendPropertyChanging();
					this._article_id = value;
					this.SendPropertyChanged("article_id");
					this.Onarticle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_title", DbType="NVarChar(MAX)")]
		public string article_title
		{
			get
			{
				return this._article_title;
			}
			set
			{
				if ((this._article_title != value))
				{
					this.Onarticle_titleChanging(value);
					this.SendPropertyChanging();
					this._article_title = value;
					this.SendPropertyChanged("article_title");
					this.Onarticle_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_body", DbType="NVarChar(MAX)")]
		public string article_body
		{
			get
			{
				return this._article_body;
			}
			set
			{
				if ((this._article_body != value))
				{
					this.Onarticle_bodyChanging(value);
					this.SendPropertyChanging();
					this._article_body = value;
					this.SendPropertyChanged("article_body");
					this.Onarticle_bodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_publishDate", DbType="NVarChar(MAX)")]
		public string article_publishDate
		{
			get
			{
				return this._article_publishDate;
			}
			set
			{
				if ((this._article_publishDate != value))
				{
					this.Onarticle_publishDateChanging(value);
					this.SendPropertyChanging();
					this._article_publishDate = value;
					this.SendPropertyChanged("article_publishDate");
					this.Onarticle_publishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Favourite", Storage="_Favourites", ThisKey="article_id", OtherKey="article_id")]
		public EntitySet<Favourite> Favourites
		{
			get
			{
				return this._Favourites;
			}
			set
			{
				this._Favourites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Article", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Favourites(Favourite entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Favourites(Favourite entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _user_firstName;
		
		private string _user_lastName;
		
		private string _user_email;
		
		private string _user_password;
		
		private EntitySet<Article> _Articles;
		
		private EntitySet<Favourite> _Favourites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onuser_firstNameChanging(string value);
    partial void Onuser_firstNameChanged();
    partial void Onuser_lastNameChanging(string value);
    partial void Onuser_lastNameChanged();
    partial void Onuser_emailChanging(string value);
    partial void Onuser_emailChanged();
    partial void Onuser_passwordChanging(string value);
    partial void Onuser_passwordChanged();
    #endregion
		
		public User()
		{
			this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
			this._Favourites = new EntitySet<Favourite>(new Action<Favourite>(this.attach_Favourites), new Action<Favourite>(this.detach_Favourites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_firstName", DbType="NVarChar(MAX)")]
		public string user_firstName
		{
			get
			{
				return this._user_firstName;
			}
			set
			{
				if ((this._user_firstName != value))
				{
					this.Onuser_firstNameChanging(value);
					this.SendPropertyChanging();
					this._user_firstName = value;
					this.SendPropertyChanged("user_firstName");
					this.Onuser_firstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_lastName", DbType="NVarChar(MAX)")]
		public string user_lastName
		{
			get
			{
				return this._user_lastName;
			}
			set
			{
				if ((this._user_lastName != value))
				{
					this.Onuser_lastNameChanging(value);
					this.SendPropertyChanging();
					this._user_lastName = value;
					this.SendPropertyChanged("user_lastName");
					this.Onuser_lastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_email", DbType="NVarChar(MAX)")]
		public string user_email
		{
			get
			{
				return this._user_email;
			}
			set
			{
				if ((this._user_email != value))
				{
					this.Onuser_emailChanging(value);
					this.SendPropertyChanging();
					this._user_email = value;
					this.SendPropertyChanged("user_email");
					this.Onuser_emailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_password", DbType="NVarChar(MAX)")]
		public string user_password
		{
			get
			{
				return this._user_password;
			}
			set
			{
				if ((this._user_password != value))
				{
					this.Onuser_passwordChanging(value);
					this.SendPropertyChanging();
					this._user_password = value;
					this.SendPropertyChanged("user_password");
					this.Onuser_passwordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Article", Storage="_Articles", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Article> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Favourite", Storage="_Favourites", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Favourite> Favourites
		{
			get
			{
				return this._Favourites;
			}
			set
			{
				this._Favourites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Favourites(Favourite entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Favourites(Favourite entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Favourites")]
	public partial class Favourite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _fav_id;
		
		private System.Nullable<int> _user_id;
		
		private System.Nullable<int> _article_id;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfav_idChanging(int value);
    partial void Onfav_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Onarticle_idChanging(System.Nullable<int> value);
    partial void Onarticle_idChanged();
    #endregion
		
		public Favourite()
		{
			this._Article = default(EntityRef<Article>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fav_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int fav_id
		{
			get
			{
				return this._fav_id;
			}
			set
			{
				if ((this._fav_id != value))
				{
					this.Onfav_idChanging(value);
					this.SendPropertyChanging();
					this._fav_id = value;
					this.SendPropertyChanged("fav_id");
					this.Onfav_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_article_id", DbType="Int")]
		public System.Nullable<int> article_id
		{
			get
			{
				return this._article_id;
			}
			set
			{
				if ((this._article_id != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onarticle_idChanging(value);
					this.SendPropertyChanging();
					this._article_id = value;
					this.SendPropertyChanged("article_id");
					this.Onarticle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Favourite", Storage="_Article", ThisKey="article_id", OtherKey="article_id", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Favourites.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Favourites.Add(this);
						this._article_id = value.article_id;
					}
					else
					{
						this._article_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Favourite", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Favourites.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Favourites.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
